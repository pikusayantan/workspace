<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx/ 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


	<!-- It register the beans in context and scan the annotations inside beans 
		and activate them -->
	<context:component-scan base-package="com.india.sayantan" />
	<!-- <tx:annotation-driven/> -->
	<jpa:repositories base-package="com.india.sayantan"/>

	<!-- Simple implementation of the standard JDBC DataSource interface, configuring 
		the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- class="org.springframework.jdbc.datasource.DriverManagerDataSource,com.mchange.v2.c3p0.ComboPooledDataSource"> -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="system" />
		<property name="password" value="admin" />
	</bean>

	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<bean id="entityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="com.india.sayantan.jdbc" />
		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
			<!-- <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property> -->
		<!-- <property name="jpaPropertyMap">
			<props>
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
			</props>
		</property> -->
	</bean>
	
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="true"/>
        <property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect"/>
    </bean>

	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>
	<!-- responsible for registering the necessary Spring components that power 
		annotation-driven transaction management; such as when @Transactional methods 
		are invoked -->


</beans>